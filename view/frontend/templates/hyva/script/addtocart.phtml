<?php
/**
 * Copyright Â© Monsoon Consulting. All rights reserved.
 * See LICENSE_MONSOON.txt for license details.
 */
declare(strict_types=1);

use Magemen\QuickShop\Block\AddToCart;
use Magento\Framework\Escaper;

/**
 * @var AddToCart $block
 * @var Escaper $escaper
 */

// phpcs:ignoreFile Generic.Files.LineLength.TooLong
?>
<style>
    .is-loading > :not(.loader) {
        visibility: hidden;
    }
</style>

<script>
    window.setAjaxCart = (selectors = '.product_addtocart_form, #product_addtocart_form', recursive = true) => {
        var addToCartForms = document.querySelectorAll(selectors);
        var delay = parseInt('<?= $escaper->escapeJs($block->getDelay()) ?>', 10);

        addToCartForms.forEach(form => {
            form.addEventListener('submit', e => {
                e.preventDefault();

                var data = new URLSearchParams(new FormData(form)),
                    loader = document.createElement('div');
                var button;
                if (form.querySelector('button[type="submit"]')){
                    button = form.querySelector('.product_submit') ?
                        form.querySelector('.product_submit') :
                        form.querySelector('button[type="submit"]');
                }
                else {
                    button = document.querySelector('button[type="submit"]');
                }


                loader.className = 'absolute inset-0 flex justify-center items-center loader';
                loader.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" xml:space="preserve" width="32" height="32">
                    <path fill="#fff" d="M73 50c0-12.7-10.3-23-23-23S27 37.3 27 50m3.9 0c0-10.5 8.5-19.1 19.1-19.1S69.1 39.5 69.1 50">
                        <animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 50 50" to="360 50 50" repeatCount="indefinite"/>
                    </path>
                </svg>
                `;

                button.prepend(loader);
                button.classList.add('relative', 'is-loading');
                button.disabled = true;

                fetch(e.currentTarget.action, {
                    method: 'POST',
                    body: data,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(res => {
                        if (!res.ok) {
                            return form.submit();
                        }

                        if (res.redirected) {
                            return [];
                        }

                        return res.json();
                    })
                    .then(data => {
                        
                        if (recursive) {
                            window.dispatchEvent(new CustomEvent('product-addtocart-success'));
                        }

                        window.dispatchEvent(new CustomEvent('reload-customer-section-data'));
                    })
                    .catch(err => {
                        window.dispatchEvent(new CustomEvent('product-addtocart-error'));

                        setMessage({
                            text:'<?= $escaper->escapeHtml(__('There was a problem adding your item to the cart.')) ?>',
                            type: 'error'
                        });
                    })
                    .finally(() => {
                        try {
                            var messages = hyva.getCookie('mage-messages');
                            messages = messages ? JSON.parse(decodeURIComponent(messages).replace(/\+/g, ' ')) : [];
                            document.cookie = 'mage-messages=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';

                        } catch (error) {
                            console.warn('Error parsing Cookie Messages:', error);
                            return;
                        }

                        setTimeout(() => {
                            loader.remove();
                            button.classList.remove('is-loading');
                            button.disabled = false;

                            messages.forEach(message => {
                                setMessage(message);
                            });
                        }, delay);
                    });
            });
        });
    }

    /**
     * Set Message
     */
    function setMessage(message) {
        typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(
            [message], 5000
        );
    }

    /** Init on pageload */
    window.setAjaxCart();
</script>
